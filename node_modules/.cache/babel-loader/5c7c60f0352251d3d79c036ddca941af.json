{"ast":null,"code":"import _slicedToArray from \"/Users/maciejwojtas/Projects/workflows/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _s = $RefreshSig$();\n\nimport { useMemo, useState } from 'react';\nimport { isAce } from '../helpers/card';\nimport { createShuffledDeck } from '../helpers/deck';\n\nvar useCardDeck = function useCardDeck() {\n  _s();\n\n  var _useState = useState(createShuffledDeck()),\n      _useState2 = _slicedToArray(_useState, 2),\n      cardsLeft = _useState2[0],\n      setCardsLeft = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      deal = _useState4[0],\n      setDeal = _useState4[1];\n\n  var acesLeft = useMemo(function () {\n    return cardsLeft.filter(function (card) {\n      return isAce(card);\n    }).length;\n  }, [cardsLeft]);\n\n  var reset = function reset() {\n    setDeal([]);\n    setCardsLeft(createShuffledDeck());\n  };\n\n  var makeDeal = function makeDeal() {\n    setDeal(cardsLeft.slice(0, 5));\n    setCardsLeft(cardsLeft.slice(5));\n  };\n\n  return {\n    deal: deal,\n    makeDeal: makeDeal,\n    reset: reset,\n    cardsLeft: cardsLeft.length,\n    acesLeft: acesLeft\n  };\n};\n\n_s(useCardDeck, \"w5vej4+Pwh0Yvs3biNGfToO44iU=\");\n\nexport default useCardDeck;","map":{"version":3,"sources":["/Users/maciejwojtas/Projects/workflows/src/hooks/useCardDeck.ts"],"names":["useMemo","useState","isAce","createShuffledDeck","useCardDeck","cardsLeft","setCardsLeft","deal","setDeal","acesLeft","filter","card","length","reset","makeDeal","slice"],"mappings":";;;;AAAA,SAASA,OAAT,EAAkBC,QAAlB,QAAkC,OAAlC;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,kBAAT,QAAmC,iBAAnC;;AAGA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AAAA;;AACxB,kBAAkCH,QAAQ,CAASE,kBAAkB,EAA3B,CAA1C;AAAA;AAAA,MAAOE,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAAwBL,QAAQ,CAAS,EAAT,CAAhC;AAAA;AAAA,MAAOM,IAAP;AAAA,MAAaC,OAAb;;AAEA,MAAMC,QAAQ,GAAGT,OAAO,CACtB;AAAA,WAAcK,SAAS,CAACK,MAAV,CAAiB,UAACC,IAAD;AAAA,aAAUT,KAAK,CAACS,IAAD,CAAf;AAAA,KAAjB,EAAwCC,MAAtD;AAAA,GADsB,EAEtB,CAACP,SAAD,CAFsB,CAAxB;;AAKA,MAAMQ,KAAK,GAAG,SAARA,KAAQ,GAAY;AACxBL,IAAAA,OAAO,CAAC,EAAD,CAAP;AACAF,IAAAA,YAAY,CAACH,kBAAkB,EAAnB,CAAZ;AACD,GAHD;;AAKA,MAAMW,QAAQ,GAAG,SAAXA,QAAW,GAAY;AAC3BN,IAAAA,OAAO,CAACH,SAAS,CAACU,KAAV,CAAgB,CAAhB,EAAmB,CAAnB,CAAD,CAAP;AACAT,IAAAA,YAAY,CAACD,SAAS,CAACU,KAAV,CAAgB,CAAhB,CAAD,CAAZ;AACD,GAHD;;AAKA,SAAO;AAAER,IAAAA,IAAI,EAAJA,IAAF;AAAQO,IAAAA,QAAQ,EAARA,QAAR;AAAkBD,IAAAA,KAAK,EAALA,KAAlB;AAAyBR,IAAAA,SAAS,EAAEA,SAAS,CAACO,MAA9C;AAAsDH,IAAAA,QAAQ,EAARA;AAAtD,GAAP;AACD,CApBD;;GAAML,W;;AAsBN,eAAeA,WAAf","sourcesContent":["import { useMemo, useState } from 'react';\nimport { isAce } from '../helpers/card';\nimport { createShuffledDeck } from '../helpers/deck';\nimport { Card } from '../types/card';\n\nconst useCardDeck = () => {\n  const [cardsLeft, setCardsLeft] = useState<Card[]>(createShuffledDeck());\n  const [deal, setDeal] = useState<Card[]>([]);\n\n  const acesLeft = useMemo(\n    (): number => cardsLeft.filter((card) => isAce(card)).length,\n    [cardsLeft]\n  );\n\n  const reset = (): void => {\n    setDeal([]);\n    setCardsLeft(createShuffledDeck());\n  };\n\n  const makeDeal = (): void => {\n    setDeal(cardsLeft.slice(0, 5));\n    setCardsLeft(cardsLeft.slice(5));\n  };\n\n  return { deal, makeDeal, reset, cardsLeft: cardsLeft.length, acesLeft };\n};\n\nexport default useCardDeck;\n"]},"metadata":{},"sourceType":"module"}